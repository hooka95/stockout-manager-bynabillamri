import React, { useState } from 'react';
import * as XLSX from 'xlsx';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';

const StockManagementApp = () => {
  const [inventory, setInventory] = useState([]);
  const [remaining, setRemaining] = useState([]);
  const [picked, setPicked] = useState([]);
  const [dataLoaded, setDataLoaded] = useState(false);
  const [receptions, setReceptions] = useState({});
  const [productions, setProductions] = useState({});
  const [expeditions, setExpeditions] = useState({});
  const [selectedItemGraph, setSelectedItemGraph] = useState(null);
  const [alertFilter, setAlertFilter] = useState('all');

  const calculateTotalQuantity = (row) => {
    const columns = ['A', 'B', 'C', 'D', 'E', 'F', 'G1', 'G2', 'H1', 'J1', 'J2', 'K', 'PROD', 'N', 'O2', 'O3', 'Repack', '24A', '24B'];
    let total = 0;
    for (const col of columns) {
      let value = row[col];
      if (typeof value === 'string' && value.includes('/')) {
        value = value.split('/')[0];
      }
      total += parseInt(value) || 0;
    }
    return total;
  };

  const extractPickedFromRemaining = (row) => {
    const picked = row['Picked'] || row['picked'] || 0;
    return typeof picked === 'string' ? parseInt(picked.split('/')[0]) || 0 : parseInt(picked) || 0;
  };

  const getStockStatus = (disponibilite) => {
    if (disponibilite < 0) return { text: 'STOCKOUT', color: 'bg-red-600 text-white' };
    if (disponibilite < 50) return { text: 'CRITIQUE', color: 'bg-red-100 text-red-800' };
    if (disponibilite < 100) return { text: 'STOCK BAS', color: 'bg-yellow-100 text-yellow-800' };
    return { text: 'À NIVEAU', color: 'bg-green-100 text-green-800' };
  };

  const handleInputChange = (itemNo, type, value) => {
    const numValue = parseInt(value) || 0;
    switch(type) {
      case 'reception':
        setReceptions(prev => ({ ...prev, [itemNo]: numValue }));
        break;
      case 'production':
        setProductions(prev => ({ ...prev, [itemNo]: numValue }));
        break;
      case 'expedition':
        setExpeditions(prev => ({ ...prev, [itemNo]: numValue }));
        break;
    }
  };

  const handleFileUpload = (event, type) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    
    reader.onload = (e) => {
      const data = new Uint8Array(e.target.result);
      const workbook = XLSX.read(data, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet);

      if (type === 'inventory') {
        const processedData = jsonData.map(row => ({
          itemNo: row['Item No'],
          itemDesc: row['Item Desc'],
          quantity: calculateTotalQuantity(row)
        }));
        setInventory(processedData);
      } else if (type === 'remaining') {
        const processedData = jsonData.map(row => ({
          itemNo: row['Item No'],
          itemDesc: row['Item Desc'],
          remaining: parseInt(row['Remaining']) || 0,
          picked: extractPickedFromRemaining(row)
        }));
        setRemaining(processedData);
        setPicked(processedData.map(({ itemNo, itemDesc, picked }) => ({
          itemNo,
          itemDesc,
          quantity: picked
        })));
      }
      setDataLoaded(true);
    };
    reader.readAsArrayBuffer(file);
  };

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Stockout Manager</h1>
          {dataLoaded && (
            <div className="flex space-x-2">
              <button
                onClick={() => setAlertFilter('all')}
                className={`px-3 py-1 rounded ${alertFilter === 'all' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
              >
                Tous
              </button>
              <button
                onClick={() => setAlertFilter('stockout')}
                className={`px-3 py-1 rounded ${alertFilter === 'stockout' ? 'bg-red-600 text-white' : 'bg-gray-200'}`}
              >
                Stockout
              </button>
              <button
                onClick={() => setAlertFilter('critique')}
                className={`px-3 py-1 rounded ${alertFilter === 'critique' ? 'bg-red-100' : 'bg-gray-200'}`}
              >
                Critique
              </button>
              <button
                onClick={() => setAlertFilter('bas')}
                className={`px-3 py-1 rounded ${alertFilter === 'bas' ? 'bg-yellow-100' : 'bg-gray-200'}`}
              >
                Stock Bas
              </button>
            </div>
          )}
        </div>

        <div className="bg-white p-6 rounded-lg shadow mb-6">
          <h2 className="text-xl font-semibold mb-4">Import des données</h2>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Inventaire (XLSX)
              </label>
              <input
                type="file"
                accept=".xlsx"
                onChange={(e) => handleFileUpload(e, 'inventory')}
                className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Remaining (XLSX)
              </label>
              <input
                type="file"
                accept=".xlsx"
                onChange={(e) => handleFileUpload(e, 'remaining')}
                className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
              />
            </div>
          </div>
        </div>

        {dataLoaded && (
          <div className="bg-white rounded-lg shadow overflow-hidden">
            <div className="px-6 py-4 border-b">
              <h2 className="text-xl font-semibold">État des stocks</h2>
            </div>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Item No</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Description</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Inventaire</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Picked</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Remaining</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Réception</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Production</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Expédition</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Balance</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Disponibilité</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {inventory.map(item => {
                    const remainingData = remaining.find(r => r.itemNo === item.itemNo);
                    const reception = receptions[item.itemNo] || 0;
                    const production = productions[item.itemNo] || 0;
                    const expedition = expeditions[item.itemNo] || 0;
                    
                    const balance = item.quantity - (remainingData?.picked || 0) + reception + production - expedition;
                    const disponibilite = balance - (remainingData?.remaining || 0);
                    const status = getStockStatus(disponibilite);

                    if (alertFilter !== 'all') {
                      if (alertFilter === 'stockout' && disponibilite >= 0) return null;
                      if (alertFilter === 'critique' && (disponibilite >= 50 || disponibilite < 0)) return null;
                      if (alertFilter === 'bas' && (disponibilite >= 100 || disponibilite < 50)) return null;
                    }

                    return (
                      <React.Fragment key={item.itemNo}>
                        <tr className="border-t">
                          <td className="px-6 py-4">{item.itemNo}</td>
                          <td className="px-6 py-4">{item.itemDesc}</td>
                          <td className="px-6 py-4">{item.quantity}</td>
                          <td className="px-6 py-4">{remainingData?.picked || 0}</td>
                          <td className="px-6 py-4">{remainingData?.remaining || 0}</td>
                          <td className="px-6 py-4">
                            <input
                              type="number"
                              value={reception}
                              onChange={(e) => handleInputChange(item.itemNo, 'reception', e.target.value)}
                              className="w-20 px-2 py-1 border rounded"
                            />
                          </td>
                          <td className="px-6 py-4">
                            <input
                              type="number"
                              value={production}
                              onChange={(e) => handleInputChange(item.itemNo, 'production', e.target.value)}
                              className="w-20 px-2 py-1 border rounded"
                            />
                          </td>
                          <td className="px-6 py-4">
                            <input
                              type="number"
                              value={expedition}
                              onChange={(e) => handleInputChange(item.itemNo, 'expedition', e.target.value)}
                              className="w-20 px-2 py-1 border rounded"
                            />
                          </td>
                          <td className="px-6 py-4">{balance}</td>
                          <td className="px-6 py-4">{disponibilite}</td>
                          <td className="px-6 py-4">
                            <span className={`px-2 py-1 rounded-full text-xs font-semibold ${status.color}`}>
                              {status.text}
                            </span>
                          </td>
                          <td className="px-6 py-4">
                            <button
                              onClick={() => setSelectedItemGraph(selectedItemGraph === item.itemNo ? null : item.itemNo)}
                              className="text-blue-600 hover:text-blue-800"
                            >
                              {selectedItemGraph === item.itemNo ? 'Masquer' : 'Voir graphique'}
                            </button>
                          </td>
                        </tr>
                        {selectedItemGraph === item.itemNo && (
                          <tr>
                            <td colSpan="12" className="px-6 py-4">
                              <LineChart width={1000} height={300} data={[
                                {name: 'Inventaire', value: item.quantity},
                                {name: 'Picked', value: remainingData?.picked || 0},
                                {name: 'Remaining', value: remainingData?.remaining || 0},
                                {name: 'Réception', value: reception},
                                {name: 'Production', value: production},
                                {name: 'Expédition', value: expedition},
                                {name: 'Balance', value: balance},
                                {name: 'Disponibilité', value: disponibilite}
                              ]}>
                                <CartesianGrid strokeDasharray="3 3" />
                                <XAxis dataKey="name" />
                                <YAxis />
                                <Tooltip />
                                <Legend />
                                <Line type="monotone" dataKey="value" stroke="#2563eb" />
                              </LineChart>
                            </td>
                          </tr>
                        )}
                      </React.Fragment>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default StockManagementApp;